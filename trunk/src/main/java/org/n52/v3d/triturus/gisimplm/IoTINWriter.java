package org.n52.v3d.triturus.gisimplm;

import org.n52.v3d.triturus.core.IoObject;
import org.n52.v3d.triturus.core.T3dException;
import org.n52.v3d.triturus.core.T3dNotYetImplException;
import org.n52.v3d.triturus.vgis.VgIndexedTIN;

import java.io.*;
import java.text.DecimalFormat;

/** 
 * Schreiben von TINs (Typ <tt>GmSimpleTINFeature</tt>) in Dateien oder Ströme.<p>
 * @author Benno Schmidt<br>
 * (c) 2003-2004, con terra GmbH & Institute for Geoinformatics<br>
 */
public class IoTINWriter extends IoAbstractWriter
{
    private String mLogString = "";
    private String mFormat;

    /** 
     * Konstruktor. Als Parameter ist der Dateiformattyp zu setzen. Wird dieser nicht unterstützt, wird später während
     * des Schreibvorgangs eine Ausnahme geworfen.<p>
     * Es werden die folgenden Formate unterstützt:
     * <ul>
     * <li><i>AcGeo:</i> ACADGEO-Format</li>
     * <li><i>Vrml1:</i> VRML 1.0-Szene (als Dreicksnetz)</li>
     * </ul>
     * Bem.:<p>
     * <b>Bislang ist keiner der Exporter getestet! Für den VRML-Export ist die Orientierung der Dreiecke noch
     * unberücksichtigt!</b><p>
     * @param pFormat Format-String, z. B. "AcGeo"
     */
    public IoTINWriter(String pFormat) {
        mLogString = this.getClass().getName();
        this.setFormatType(pFormat);
    }

    /** protokolliert die durchgeführte Transformation. */
    public String log() {
        return mLogString;
    }

    /** 
     * setzt den Formattyp.<p>
     * @param pFormat Dateityp (z. B. "AcGeo")
     */
    public void setFormatType(String pFormat)
    {
        mFormat = pFormat;
    }

    /**
     * schreibt ein TIN in eine Datei. Wird der spezifizierte Formattyp nicht unterstützt, wirft die Methode eine
     * <tt>T3dNotYetImplException</tt>.<p>
     * @param pTIN zu schreibendes TIN
     * @param pFilename Pfad, unter dem die Datei abgelegt wird
     * @throws org.n52.v3d.triturus.core.T3dException
     * @throws org.n52.v3d.triturus.core.T3dNotYetImplException
     */
    public void writeToFile(GmSimpleTINFeature pTIN, String pFilename) 
    	throws T3dException, T3dNotYetImplException
    {
        int i = 0;
        if (mFormat.equalsIgnoreCase("AcGeo")) i = 1;
        if (mFormat.equalsIgnoreCase("Vrml1")) i = 2;
        // --> hier ggf. weitere Typen ergänzen...

        try {
            switch (i) {
                case 1: this.writeAcadGeoTIN(pTIN, pFilename); break;
                case 2: this.writeSimpleVrml(pTIN, pFilename); break;
                // --> hier ggf. weitere Typen ergänzen...

                default: throw new T3dNotYetImplException("Unsupported file format");
            }
        }
        catch (T3dException e) {
            throw e;
        }
    }  

	private void writeAcadGeoTIN(GmSimpleTINFeature pTIN, String pFilename) throws T3dException
	{
		try {
			FileWriter lFileWrite = new FileWriter(pFilename);
			BufferedWriter lDat = new BufferedWriter(lFileWrite);

			//GmSimpleTINGeometry lGeom = (GmSimpleTINGeometry) pTIN.getGeometry();
			VgIndexedTIN lGeom = (VgIndexedTIN) pTIN.getGeometry();

			lDat.write("TINBEGIN");
			lDat.newLine();
			lDat.write("FORMAT R=OFF C=OFF");
			lDat.newLine();
			lDat.write("TIN:");
			lDat.newLine();

            DecimalFormat dfXY = this.getDecimalFormatZ();
            DecimalFormat dfZ = this.getDecimalFormatZ();

			lDat.write("POINTS "+lGeom.numberOfPoints()+"\n");
			for (int i = 0; i < lGeom.numberOfPoints(); i++) {
				lDat.write(dfXY.format(lGeom.getPoint(i).getX()) + " ");
				lDat.write(dfXY.format(lGeom.getPoint(i).getY()) + " ");
				lDat.write(dfZ.format(lGeom.getPoint(i).getZ()) + "\n");
			}
			
			lDat.write("TRIANGLES "+lGeom.numberOfTriangles()+"\n");
			for (int i = 0; i < lGeom.numberOfTriangles(); i++) {
				lDat.write(lGeom.getTriangleVertexIndices(i)[0] + " ");
				lDat.write(lGeom.getTriangleVertexIndices(i)[1] + " ");
				lDat.write(lGeom.getTriangleVertexIndices(i)[2] + "\n");
			}
			lDat.write("END");
			lDat.newLine();
			
			lDat.close();
			lFileWrite.close();
		}
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	    
    private void writeSimpleVrml(GmSimpleTINFeature pTIN, String pFilename) throws T3dException
    {
        try {
            FileWriter lFileWrite = new FileWriter(pFilename);
            BufferedWriter lDat = new BufferedWriter(lFileWrite);

            GmSimpleTINGeometry lGeom = (GmSimpleTINGeometry) pTIN.getGeometry();

            lDat.write("#VRML V1.0 ascii"); lDat.newLine();
            lDat.newLine();
            lDat.write("Separator {"); lDat.newLine();
            lDat.newLine();
            lDat.write("  DEF SceneInfo Info {\n"); lDat.newLine();
            lDat.write("    string \"Generated by ACAD-GEO DGM v3.1\""); lDat.newLine();
            lDat.write("  }"); lDat.newLine();
            lDat.write("  ShapeHints {"); lDat.newLine();
            lDat.write("    vertexOrdering CLOCKWISE"); lDat.newLine();
            lDat.write("    shapeType SOLID"); lDat.newLine();
            lDat.write("    faceType CONVEX"); lDat.newLine();
            lDat.write("    creaseAngle 0.0"); lDat.newLine();
            lDat.write("  }"); lDat.newLine();
            lDat.newLine();
            lDat.write("  DEF Green_DEM Separator {"); lDat.newLine();
            lDat.write("    Material {\n");
            lDat.write("      diffuseColor 0.0 1.0 0.0"); lDat.newLine();
            lDat.write("      ambientColor 0.0 0.1 0.0"); lDat.newLine();
            lDat.write("      specularColor 0.8 0.8 0.8"); lDat.newLine();
            lDat.write("      shininess 0.1"); lDat.newLine();
            lDat.write("    }"); lDat.newLine();
            lDat.write("    Coordinate3 {"); lDat.newLine();
            lDat.write("      point ["); lDat.newLine();

            // VRML Teil 1 (Angabe der Stützpunkte):

            DecimalFormat dfXY = this.getDecimalFormatZ();
            DecimalFormat dfZ = this.getDecimalFormatZ();

            for (int i = 0; i < lGeom.numberOfPoints(); i++) {
                GmPoint pt = new GmPoint(lGeom.getPoint(i));
                lDat.write("        " + dfXY.format(pt.getX()) + " " + dfXY.format(pt.getY()) + " " + dfZ.format(pt.getZ()));
                lDat.newLine();
            }

            lDat.write("      ]"); lDat.newLine();
            lDat.write("    }"); lDat.newLine();
            lDat.newLine();

            // VRML Teil 2 (Vermaschung):

            lDat.write("    IndexedFaceSet {"); lDat.newLine();
            lDat.write("      coordIndex ["); lDat.newLine();

            int crn[];
            for (int i = 0; i <= lGeom.numberOfTriangles(); i++) {
            	crn = lGeom.getTriangleVertexIndices( i );
                lDat.write("        " + crn[0] + ", " + crn[1] + ", " + crn[3] + ", -1,"); lDat.newLine();
            }

            lDat.write("      ]"); lDat.newLine();
            lDat.write("    }"); lDat.newLine();
            lDat.write("  }"); lDat.newLine();
            lDat.write("}"); lDat.newLine();

            lDat.close();
        }
        catch (FileNotFoundException e) {
            throw new T3dException("Could not access file \"" + pFilename + "\".");
        }
        catch (IOException e) {
            throw new T3dException(e.getMessage());
        }
        catch (T3dException e) {
            throw new T3dException(e.getMessage());
        }
    } // writeSimpleVrml()
}
