/**
 * Copyright (C) 2019 52 North Initiative for Geospatial Open Source
 * Software GmbH
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 *  - Apache License, version 2.0
 *  - Apache Software License, version 1.0
 *  - GNU Lesser General Public License, version 3
 *  - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *  - Common Development and Distribution License (CDDL), version 1.0.
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public License 
 * version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * Contact: Benno Schmidt, 52 North Initiative for Geospatial Open Source 
 * Software GmbH, Martin-Luther-King-Weg 24, 48155 Muenster, Germany, 
 * b.schmidt@52north.org
 */
package org.n52.v3d.triturus.gisimplm;

import org.n52.v3d.triturus.core.IoFormatType;
import org.n52.v3d.triturus.core.T3dException;
import org.n52.v3d.triturus.core.T3dNotYetImplException;
import org.n52.v3d.triturus.gisimplm.IoAbstractWriter;
import org.n52.v3d.triturus.vgis.VgLineSegment;
import org.n52.v3d.triturus.vgis.VgPoint;

import java.io.*;
import java.text.DecimalFormat;
import java.util.List;

/** 
 * Writer which exports line segments to files. Various formats such as VTK 
 * might be supported. 
 * 
 * @author Benno Schmidt
 */
public class IoLineSegmentWriter extends IoAbstractWriter
{
    private String logString = "";
    private String format;
    
    private BufferedWriter doc;

    /**
     * Constructor. As a parameter, format type has to be set. For unsupported
     * file formats, a <tt>T3dNotYetImplException</tt> will be thrown. Currently, 
     * these formats are supported:<br />
     * <ul>
     * <li><i>VTK:</i> VTK 4.2 format (polydata dataset giving line segments)</li>
     * </ul>
     * 
     * @param format Format string (e.g. <tt></tt>&quot;VTK&quot;</tt>)
     * @see IoLineSegmentWriter#VTK_DATASET
     */
    public IoLineSegmentWriter(String format) {
        logString = this.getClass().getName();
        this.setFormatType(format);
    }

    public String log() {
        return logString;
    }

    /** 
     * sets the format type.
     * 
     * @param format Format string (e.g. <tt></tt>&quot;VTK&quot;</tt>)
     */
    public void setFormatType(String format)
    {
        this.format = format;
    }

    /**
     * writes the lines to a file.
     * 
     * @param lines Lines to be written
     * @param filename File path
     * @throws org.n52.v3d.triturus.core.T3dException
     * @throws org.n52.v3d.triturus.core.T3dNotYetImplException
     */
    public void writeToFile(List<VgLineSegment> lines, String filename) 
        throws T3dException, T3dNotYetImplException
    {
        int i = 0;
        if (format.equalsIgnoreCase(IoFormatType.VTK_DATASET)) i = 1;
        // --> add more formats here...

        try {
            switch (i) {
                case 1: this.writeVTKLines(lines, filename); break;
                // --> add more formats here...

                default: throw new T3dNotYetImplException("Unsupported file format");
            }
        }
        catch (T3dException e) {
            throw e;
        }
    }
    
    private void writeVTKLines(List<VgLineSegment> lines, String filename) 
    	throws T3dException
    {
        try {
            doc = new BufferedWriter(new FileWriter(filename));
            
            // VgIndexedTIN geom = (VgIndexedTIN) tin.getGeometry();
            
            wl("# vtk DataFile Version 3.0 generated by 52N Triturus");
            wl("vtk output");
            wl("ASCII");
            wl("DATASET POLYDATA");
            
            DecimalFormat dfXY = this.getDecimalFormatXY();
            DecimalFormat dfZ = this.getDecimalFormatZ();
            VgPoint p1, p2;

            wl("POINTS " + (2 * lines.size()) + " float");
            for (int i = 0; i < lines.size(); i++) {
                p1 = lines.get(i).getStartPoint();
            	p2 = lines.get(i).getEndPoint();
                wl(p1.getX() + " " + p1.getY() + " " + p1.getZ());
                wl(p2.getX() + " " + p2.getY() + " " + p2.getZ());
            }

            w("LINES " + lines.size());
            wl(" " + (3 * lines.size()));
            for (int i = 0; i < lines.size(); i++) {
                wl("2" + " " + (2 * i) + " " + (2 * i + 1));
            }
            
            doc.close();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    protected void w(String line) {
        try {
            doc.write(line);
        }
        catch (IOException e) {
            throw new T3dException(e.getMessage());
        }
    }

    protected void wl(String line) {
        try {
            doc.write(line);
            doc.newLine();
        }
        catch (IOException e) {
            throw new T3dException(e.getMessage());
        }
    }

    protected void wl() {
        try {
            doc.newLine();
        }
        catch (IOException e) {
            throw new T3dException(e.getMessage());
        }
    }
}
