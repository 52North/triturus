/**
 * Copyright (C) 2021 52 North Initiative for Geospatial Open Source 
 * Software GmbH
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 *  - Apache License, version 2.0
 *  - Apache Software License, version 1.0
 *  - GNU Lesser General Public License, version 3
 *  - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *  - Common Development and Distribution License (CDDL), version 1.0.
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public License 
 * version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * Contact: Benno Schmidt and Martin May, 52 North Initiative for Geospatial 
 * Open Source Software GmbH, Martin-Luther-King-Weg 24, 48155 Muenster, 
 * Germany, info@52north.org
 */
package org.n52.v3d.triturus.gisimplm;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

import org.n52.v3d.triturus.core.IoFormatType;
import org.n52.v3d.triturus.core.T3dNotYetImplException;
import org.n52.v3d.triturus.core.T3dException;
import org.n52.v3d.triturus.t3dutil.T3dVector;

import java.text.DecimalFormat;

/**
 * The <tt>IoFloatGridWriter</tt> provides methods to write grids holding
 * floating-point numbers of type {@link GmSimpleFloatGrid} to a file or 
 * stream. 
 *
 * @author Benno Schmidt
 */
public class IoFloatGridWriter extends IoAbstractWriter 
{
    private String logString = "";
    private String format;
    private BufferedWriter doc;

    /**
     * Constructor. As an input parameter, the file format type identifier must
     * be specified. The supported formats are listed below:<br/>
     * <ul>
     * <li><i>VTK:</i> VTK 3.0 format (polydata with cell attributes)</li>
     * </ul><br/>
     *
     * @param format Format-string, see {@link #setFormatType(String)}
     */
    public IoFloatGridWriter(String format) {
        logString = this.getClass().getName();
        this.setFormatType(format);
    }

    public String log() {
        return logString;
    }

    /**
     * sets the format type.
     *
     * @param format Format-string (e.g. <tt>&quot;VTKDataset&quot;</tt>)
     * @see IoFormatType#VTK_DATASET
     */
    public void setFormatType(String format) {
        this.format = format;
    }

    /**
     * writes a data grid to a file.
     *
     * @param grid Data-grid to be written
     * @param filename File name (with path optionally)
     * @throws T3dException for framework-specific errors
     * @throws T3dNotYetImplException if the called functionality has not been implemented yet
     */
    public void writeToFile(GmSimpleFloatGrid grid, String filename) 
        throws T3dException, T3dNotYetImplException 
    {
        int i = 0;
        if (format.equalsIgnoreCase(IoFormatType.VTK_DATASET)) i = 1;
        // --> add more types here...

        switch (i) {
            case 1:
                this.writeVtkDataset(grid, filename);
                break;
            // --> add more types here...

            default:
                throw new T3dException("Unsupported file format.");
        }
    }

    private void writeVtkDataset(GmSimpleFloatGrid grid, String filename) 
       	throws T3dException
    {
        try {
            doc = new BufferedWriter(new FileWriter(filename));
        
            GmSimple2dGridGeometry geom = (GmSimple2dGridGeometry) grid.getGeometry();
            
            wl("# vtk DataFile Version 3.0 generated by 52N Triturus");
            wl("vtk output");
            wl("ASCII");
            wl("DATASET POLYDATA");
            
            int 
                nRows = geom.numberOfRows(),
                nCols = geom.numberOfColumns();
         
            DecimalFormat dfXY = this.getDecimalFormatXY();
            DecimalFormat dfZ = this.getDecimalFormatZ();
            
            wl("POINTS " + (nRows * nCols) + " float");
            T3dVector pt;
            for (int j = 0; j < geom.numberOfColumns(); j++) {
                for (int i = 0; i < geom.numberOfRows(); i++) 
                {
                    if (grid.isSet(i, j))
                        pt = new T3dVector(grid.getPoint(i, j));
                    else
                        pt = new T3dVector(0., 0., 0.); // dummy values

                    w(dfXY.format(pt.getX()));
                    w(" " + dfXY.format(pt.getY()));
                    wl(" " + dfZ.format(pt.getZ()));
                }
            }
            
            // Pass 1: Determine number of cells
            int nCells = 0;
            for (int j = 0; j < nCols - 1; j++) {
                for (int i = 0; i < nRows - 1; i++) 
                {
                    if (
                        grid.isSet(i, j) && 
                        grid.isSet(i + 1, j) && 
                        grid.isSet(i + 1, j + 1) && 
                        grid.isSet(i, j + 1)) 
                    {
                        nCells++;
                    }
                }
            }
            w("POLYGONS " + nCells);
            wl(" " + (5 * nCells));

            // Pass 2: Write cell data
            int crn1, crn2, crn3, crn4;
            for (int j = 0; j < nCols - 1; j++) {
                for (int i = 0; i < nRows - 1; i++) 
                {
                    if (
                        grid.isSet(i, j) && 
                        grid.isSet(i + 1, j) && 
                        grid.isSet(i + 1, j + 1) && 
                        grid.isSet(i, j + 1)) 
                    {
                        crn1 = i + j * nRows;
                        crn2 = (i + 1) + j * nRows;
                        crn3 = (i + 1) + (j + 1) * nRows;
                        crn4 = i + (j + 1) * nRows;
                        w("4"); // number of polygon vertices
                        w(" " + crn1);
                        w(" " + crn2);
                        w(" " + crn3);
                        w(" " + crn4);
                        wl();
                    }
                }
            }

            // Write field data:
            wl("POINT_DATA " + (nRows * nCols));            	

            wl("SCALARS " + grid.getName() + " float 1"); 
            wl("LOOKUP_TABLE default");

            for (int j = 0; j < geom.numberOfColumns(); j++) {
                for (int i = 0; i < geom.numberOfRows(); i++) 
                {
                    if (grid.isSet(i, j))
                        pt = new T3dVector(grid.getPoint(i, j));
                    else
                        pt = new T3dVector(0., 0., 0.); // dummy values

                    wl("" + dfZ.format(pt.getZ())); 
                    // Note: getZ() and dfZ appear 'ugly' getZ() since the 3rd
                    // dimesion refers to non-georeferenced values here...
                }
            }

            doc.close();
        } 
        catch (IOException e) {
            throw new T3dException(e.getMessage());
        }
    }

    private void w(String line) {
        try {
            doc.write(line);
        }
        catch (IOException e) {
            throw new T3dException(e.getMessage());
        }
    }

    private void wl(String line) {
        try {
            doc.write(line);
            doc.newLine();
        }
        catch (IOException e) {
            throw new T3dException(e.getMessage());
        }
    }

    private void wl() {
        try {
            doc.newLine();
        }
        catch (IOException e) {
            throw new T3dException(e.getMessage());
        }
    }
}
